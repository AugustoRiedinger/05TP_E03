
05TP_E03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001720  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080018cc  080018cc  000118cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001940  08001940  00011940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001944  08001944  00011944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000009c  20000000  08001948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
  7 .bss          0000005c  2000009c  2000009c  0002009c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000f8  200000f8  0002009c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007ecf  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000010b7  00000000  00000000  00027f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000920  00000000  00000000  00029058  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000878  00000000  00000000  00029978  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000313f  00000000  00000000  0002a1f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000313b  00000000  00000000  0002d32f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003046a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000027bc  00000000  00000000  000304e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000009c 	.word	0x2000009c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080018b4 	.word	0x080018b4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200000a0 	.word	0x200000a0
 80001e8:	080018b4 	.word	0x080018b4

080001ec <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001f4:	2300      	movs	r3, #0
 80001f6:	73fb      	strb	r3, [r7, #15]
 80001f8:	2300      	movs	r3, #0
 80001fa:	73bb      	strb	r3, [r7, #14]
 80001fc:	230f      	movs	r3, #15
 80001fe:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	78db      	ldrb	r3, [r3, #3]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d039      	beq.n	800027c <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000208:	4b27      	ldr	r3, [pc, #156]	; (80002a8 <NVIC_Init+0xbc>)
 800020a:	68db      	ldr	r3, [r3, #12]
 800020c:	43db      	mvns	r3, r3
 800020e:	0a1b      	lsrs	r3, r3, #8
 8000210:	b2db      	uxtb	r3, r3
 8000212:	f003 0307 	and.w	r3, r3, #7
 8000216:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000218:	7bfb      	ldrb	r3, [r7, #15]
 800021a:	f1c3 0304 	rsb	r3, r3, #4
 800021e:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000220:	7b7a      	ldrb	r2, [r7, #13]
 8000222:	7bfb      	ldrb	r3, [r7, #15]
 8000224:	fa42 f303 	asr.w	r3, r2, r3
 8000228:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	785b      	ldrb	r3, [r3, #1]
 800022e:	461a      	mov	r2, r3
 8000230:	7bbb      	ldrb	r3, [r7, #14]
 8000232:	fa02 f303 	lsl.w	r3, r2, r3
 8000236:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	789a      	ldrb	r2, [r3, #2]
 800023c:	7b7b      	ldrb	r3, [r7, #13]
 800023e:	4013      	ands	r3, r2
 8000240:	b2da      	uxtb	r2, r3
 8000242:	7bfb      	ldrb	r3, [r7, #15]
 8000244:	4313      	orrs	r3, r2
 8000246:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000248:	7bfb      	ldrb	r3, [r7, #15]
 800024a:	011b      	lsls	r3, r3, #4
 800024c:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800024e:	4a17      	ldr	r2, [pc, #92]	; (80002ac <NVIC_Init+0xc0>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	4413      	add	r3, r2
 8000256:	7bfa      	ldrb	r2, [r7, #15]
 8000258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800025c:	4a13      	ldr	r2, [pc, #76]	; (80002ac <NVIC_Init+0xc0>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	095b      	lsrs	r3, r3, #5
 8000264:	b2db      	uxtb	r3, r3
 8000266:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	f003 031f 	and.w	r3, r3, #31
 8000270:	2101      	movs	r1, #1
 8000272:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000276:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800027a:	e00f      	b.n	800029c <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800027c:	490b      	ldr	r1, [pc, #44]	; (80002ac <NVIC_Init+0xc0>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	095b      	lsrs	r3, r3, #5
 8000284:	b2db      	uxtb	r3, r3
 8000286:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	f003 031f 	and.w	r3, r3, #31
 8000290:	2201      	movs	r2, #1
 8000292:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000294:	f100 0320 	add.w	r3, r0, #32
 8000298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800029c:	bf00      	nop
 800029e:	3714      	adds	r7, #20
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	e000ed00 	.word	0xe000ed00
 80002ac:	e000e100 	.word	0xe000e100

080002b0 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	2300      	movs	r3, #0
 80002c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 80002c2:	4b14      	ldr	r3, [pc, #80]	; (8000314 <DAC_Init+0x64>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 80002c8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	fa02 f303 	lsl.w	r3, r2, r3
 80002d2:	43db      	mvns	r3, r3
 80002d4:	68fa      	ldr	r2, [r7, #12]
 80002d6:	4013      	ands	r3, r2
 80002d8:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	689b      	ldr	r3, [r3, #8]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80002e8:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_OutputBuffer);
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	68db      	ldr	r3, [r3, #12]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80002ee:	4313      	orrs	r3, r2
 80002f0:	60bb      	str	r3, [r7, #8]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 80002f2:	68ba      	ldr	r2, [r7, #8]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	fa02 f303 	lsl.w	r3, r2, r3
 80002fa:	68fa      	ldr	r2, [r7, #12]
 80002fc:	4313      	orrs	r3, r2
 80002fe:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8000300:	4a04      	ldr	r2, [pc, #16]	; (8000314 <DAC_Init+0x64>)
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	6013      	str	r3, [r2, #0]
}
 8000306:	bf00      	nop
 8000308:	3714      	adds	r7, #20
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40007400 	.word	0x40007400

08000318 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	460b      	mov	r3, r1
 8000322:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000324:	78fb      	ldrb	r3, [r7, #3]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d009      	beq.n	800033e <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 800032a:	490d      	ldr	r1, [pc, #52]	; (8000360 <DAC_Cmd+0x48>)
 800032c:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <DAC_Cmd+0x48>)
 800032e:	681a      	ldr	r2, [r3, #0]
 8000330:	2001      	movs	r0, #1
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	fa00 f303 	lsl.w	r3, r0, r3
 8000338:	4313      	orrs	r3, r2
 800033a:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 800033c:	e009      	b.n	8000352 <DAC_Cmd+0x3a>
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 800033e:	4908      	ldr	r1, [pc, #32]	; (8000360 <DAC_Cmd+0x48>)
 8000340:	4b07      	ldr	r3, [pc, #28]	; (8000360 <DAC_Cmd+0x48>)
 8000342:	681a      	ldr	r2, [r3, #0]
 8000344:	2001      	movs	r0, #1
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	fa00 f303 	lsl.w	r3, r0, r3
 800034c:	43db      	mvns	r3, r3
 800034e:	4013      	ands	r3, r2
 8000350:	600b      	str	r3, [r1, #0]
}
 8000352:	bf00      	nop
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	40007400 	.word	0x40007400

08000364 <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	460b      	mov	r3, r1
 800036e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000370:	78fb      	ldrb	r3, [r7, #3]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d00a      	beq.n	800038c <DAC_DMACmd+0x28>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 8000376:	490e      	ldr	r1, [pc, #56]	; (80003b0 <DAC_DMACmd+0x4c>)
 8000378:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <DAC_DMACmd+0x4c>)
 800037a:	681a      	ldr	r2, [r3, #0]
 800037c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	fa00 f303 	lsl.w	r3, r0, r3
 8000386:	4313      	orrs	r3, r2
 8000388:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
  }
}
 800038a:	e00a      	b.n	80003a2 <DAC_DMACmd+0x3e>
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 800038c:	4908      	ldr	r1, [pc, #32]	; (80003b0 <DAC_DMACmd+0x4c>)
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <DAC_DMACmd+0x4c>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	fa00 f303 	lsl.w	r3, r0, r3
 800039c:	43db      	mvns	r3, r3
 800039e:	4013      	ands	r3, r2
 80003a0:	600b      	str	r3, [r1, #0]
}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	40007400 	.word	0x40007400

080003b4 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 0201 	bic.w	r2, r3, #1
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	2200      	movs	r2, #0
 80003d2:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2200      	movs	r2, #0
 80003d8:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2200      	movs	r2, #0
 80003de:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2200      	movs	r2, #0
 80003e4:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	2221      	movs	r2, #33	; 0x21
 80003ea:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a46      	ldr	r2, [pc, #280]	; (8000508 <DMA_DeInit+0x154>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d103      	bne.n	80003fc <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 80003f4:	4b45      	ldr	r3, [pc, #276]	; (800050c <DMA_DeInit+0x158>)
 80003f6:	223d      	movs	r2, #61	; 0x3d
 80003f8:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80003fa:	e07e      	b.n	80004fa <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a44      	ldr	r2, [pc, #272]	; (8000510 <DMA_DeInit+0x15c>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d104      	bne.n	800040e <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8000404:	4b41      	ldr	r3, [pc, #260]	; (800050c <DMA_DeInit+0x158>)
 8000406:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800040a:	609a      	str	r2, [r3, #8]
}
 800040c:	e075      	b.n	80004fa <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4a40      	ldr	r2, [pc, #256]	; (8000514 <DMA_DeInit+0x160>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d104      	bne.n	8000420 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8000416:	4b3d      	ldr	r3, [pc, #244]	; (800050c <DMA_DeInit+0x158>)
 8000418:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800041c:	609a      	str	r2, [r3, #8]
}
 800041e:	e06c      	b.n	80004fa <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a3d      	ldr	r2, [pc, #244]	; (8000518 <DMA_DeInit+0x164>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d104      	bne.n	8000432 <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000428:	4b38      	ldr	r3, [pc, #224]	; (800050c <DMA_DeInit+0x158>)
 800042a:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800042e:	609a      	str	r2, [r3, #8]
}
 8000430:	e063      	b.n	80004fa <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a39      	ldr	r2, [pc, #228]	; (800051c <DMA_DeInit+0x168>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d103      	bne.n	8000442 <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 800043a:	4b34      	ldr	r3, [pc, #208]	; (800050c <DMA_DeInit+0x158>)
 800043c:	4a38      	ldr	r2, [pc, #224]	; (8000520 <DMA_DeInit+0x16c>)
 800043e:	60da      	str	r2, [r3, #12]
}
 8000440:	e05b      	b.n	80004fa <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4a37      	ldr	r2, [pc, #220]	; (8000524 <DMA_DeInit+0x170>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d103      	bne.n	8000452 <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 800044a:	4b30      	ldr	r3, [pc, #192]	; (800050c <DMA_DeInit+0x158>)
 800044c:	4a36      	ldr	r2, [pc, #216]	; (8000528 <DMA_DeInit+0x174>)
 800044e:	60da      	str	r2, [r3, #12]
}
 8000450:	e053      	b.n	80004fa <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a35      	ldr	r2, [pc, #212]	; (800052c <DMA_DeInit+0x178>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d103      	bne.n	8000462 <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800045a:	4b2c      	ldr	r3, [pc, #176]	; (800050c <DMA_DeInit+0x158>)
 800045c:	4a34      	ldr	r2, [pc, #208]	; (8000530 <DMA_DeInit+0x17c>)
 800045e:	60da      	str	r2, [r3, #12]
}
 8000460:	e04b      	b.n	80004fa <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4a33      	ldr	r2, [pc, #204]	; (8000534 <DMA_DeInit+0x180>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d104      	bne.n	8000474 <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 800046a:	4b28      	ldr	r3, [pc, #160]	; (800050c <DMA_DeInit+0x158>)
 800046c:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000470:	60da      	str	r2, [r3, #12]
}
 8000472:	e042      	b.n	80004fa <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4a30      	ldr	r2, [pc, #192]	; (8000538 <DMA_DeInit+0x184>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d103      	bne.n	8000484 <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 800047c:	4b2f      	ldr	r3, [pc, #188]	; (800053c <DMA_DeInit+0x188>)
 800047e:	223d      	movs	r2, #61	; 0x3d
 8000480:	609a      	str	r2, [r3, #8]
}
 8000482:	e03a      	b.n	80004fa <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a2e      	ldr	r2, [pc, #184]	; (8000540 <DMA_DeInit+0x18c>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d104      	bne.n	8000496 <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 800048c:	4b2b      	ldr	r3, [pc, #172]	; (800053c <DMA_DeInit+0x188>)
 800048e:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000492:	609a      	str	r2, [r3, #8]
}
 8000494:	e031      	b.n	80004fa <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4a2a      	ldr	r2, [pc, #168]	; (8000544 <DMA_DeInit+0x190>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d104      	bne.n	80004a8 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 800049e:	4b27      	ldr	r3, [pc, #156]	; (800053c <DMA_DeInit+0x188>)
 80004a0:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80004a4:	609a      	str	r2, [r3, #8]
}
 80004a6:	e028      	b.n	80004fa <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4a27      	ldr	r2, [pc, #156]	; (8000548 <DMA_DeInit+0x194>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d104      	bne.n	80004ba <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 80004b0:	4b22      	ldr	r3, [pc, #136]	; (800053c <DMA_DeInit+0x188>)
 80004b2:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80004b6:	609a      	str	r2, [r3, #8]
}
 80004b8:	e01f      	b.n	80004fa <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4a23      	ldr	r2, [pc, #140]	; (800054c <DMA_DeInit+0x198>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d103      	bne.n	80004ca <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 80004c2:	4b1e      	ldr	r3, [pc, #120]	; (800053c <DMA_DeInit+0x188>)
 80004c4:	4a16      	ldr	r2, [pc, #88]	; (8000520 <DMA_DeInit+0x16c>)
 80004c6:	60da      	str	r2, [r3, #12]
}
 80004c8:	e017      	b.n	80004fa <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a20      	ldr	r2, [pc, #128]	; (8000550 <DMA_DeInit+0x19c>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d103      	bne.n	80004da <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80004d2:	4b1a      	ldr	r3, [pc, #104]	; (800053c <DMA_DeInit+0x188>)
 80004d4:	4a14      	ldr	r2, [pc, #80]	; (8000528 <DMA_DeInit+0x174>)
 80004d6:	60da      	str	r2, [r3, #12]
}
 80004d8:	e00f      	b.n	80004fa <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4a1d      	ldr	r2, [pc, #116]	; (8000554 <DMA_DeInit+0x1a0>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d103      	bne.n	80004ea <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80004e2:	4b16      	ldr	r3, [pc, #88]	; (800053c <DMA_DeInit+0x188>)
 80004e4:	4a12      	ldr	r2, [pc, #72]	; (8000530 <DMA_DeInit+0x17c>)
 80004e6:	60da      	str	r2, [r3, #12]
}
 80004e8:	e007      	b.n	80004fa <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4a1a      	ldr	r2, [pc, #104]	; (8000558 <DMA_DeInit+0x1a4>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d103      	bne.n	80004fa <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 80004f2:	4b12      	ldr	r3, [pc, #72]	; (800053c <DMA_DeInit+0x188>)
 80004f4:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80004f8:	60da      	str	r2, [r3, #12]
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40026010 	.word	0x40026010
 800050c:	40026000 	.word	0x40026000
 8000510:	40026028 	.word	0x40026028
 8000514:	40026040 	.word	0x40026040
 8000518:	40026058 	.word	0x40026058
 800051c:	40026070 	.word	0x40026070
 8000520:	2000003d 	.word	0x2000003d
 8000524:	40026088 	.word	0x40026088
 8000528:	20000f40 	.word	0x20000f40
 800052c:	400260a0 	.word	0x400260a0
 8000530:	203d0000 	.word	0x203d0000
 8000534:	400260b8 	.word	0x400260b8
 8000538:	40026410 	.word	0x40026410
 800053c:	40026400 	.word	0x40026400
 8000540:	40026428 	.word	0x40026428
 8000544:	40026440 	.word	0x40026440
 8000548:	40026458 	.word	0x40026458
 800054c:	40026470 	.word	0x40026470
 8000550:	40026488 	.word	0x40026488
 8000554:	400264a0 	.word	0x400264a0
 8000558:	400264b8 	.word	0x400264b8

0800055c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000570:	68fa      	ldr	r2, [r7, #12]
 8000572:	4b25      	ldr	r3, [pc, #148]	; (8000608 <DMA_Init+0xac>)
 8000574:	4013      	ands	r3, r2
 8000576:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000586:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000592:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	6a1b      	ldr	r3, [r3, #32]
 8000598:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800059e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005a4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80005aa:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005b0:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	f023 0307 	bic.w	r3, r3, #7
 80005ca:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d4:	4313      	orrs	r3, r2
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	4313      	orrs	r3, r2
 80005da:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	691a      	ldr	r2, [r3, #16]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	685a      	ldr	r2, [r3, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	689a      	ldr	r2, [r3, #8]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60da      	str	r2, [r3, #12]
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	f01c803f 	.word	0xf01c803f

0800060c <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	460b      	mov	r3, r1
 8000616:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000618:	78fb      	ldrb	r3, [r7, #3]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d006      	beq.n	800062c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f043 0201 	orr.w	r2, r3, #1
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800062a:	e005      	b.n	8000638 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f023 0201 	bic.w	r2, r3, #1
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	601a      	str	r2, [r3, #0]
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000644:	b480      	push	{r7}
 8000646:	b087      	sub	sp, #28
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]
 800065e:	e076      	b.n	800074e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000660:	2201      	movs	r2, #1
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	fa02 f303 	lsl.w	r3, r2, r3
 8000668:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	693b      	ldr	r3, [r7, #16]
 8000670:	4013      	ands	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	429a      	cmp	r2, r3
 800067a:	d165      	bne.n	8000748 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	2103      	movs	r1, #3
 8000686:	fa01 f303 	lsl.w	r3, r1, r3
 800068a:	43db      	mvns	r3, r3
 800068c:	401a      	ands	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	791b      	ldrb	r3, [r3, #4]
 800069a:	4619      	mov	r1, r3
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	fa01 f303 	lsl.w	r3, r1, r3
 80006a4:	431a      	orrs	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	791b      	ldrb	r3, [r3, #4]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d003      	beq.n	80006ba <GPIO_Init+0x76>
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	791b      	ldrb	r3, [r3, #4]
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d12e      	bne.n	8000718 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	689a      	ldr	r2, [r3, #8]
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	2103      	movs	r1, #3
 80006c4:	fa01 f303 	lsl.w	r3, r1, r3
 80006c8:	43db      	mvns	r3, r3
 80006ca:	401a      	ands	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	689a      	ldr	r2, [r3, #8]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	795b      	ldrb	r3, [r3, #5]
 80006d8:	4619      	mov	r1, r3
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	fa01 f303 	lsl.w	r3, r1, r3
 80006e2:	431a      	orrs	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	685a      	ldr	r2, [r3, #4]
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	4619      	mov	r1, r3
 80006f2:	2301      	movs	r3, #1
 80006f4:	408b      	lsls	r3, r1
 80006f6:	43db      	mvns	r3, r3
 80006f8:	401a      	ands	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	683a      	ldr	r2, [r7, #0]
 8000704:	7992      	ldrb	r2, [r2, #6]
 8000706:	4611      	mov	r1, r2
 8000708:	697a      	ldr	r2, [r7, #20]
 800070a:	b292      	uxth	r2, r2
 800070c:	fa01 f202 	lsl.w	r2, r1, r2
 8000710:	b292      	uxth	r2, r2
 8000712:	431a      	orrs	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	68da      	ldr	r2, [r3, #12]
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	b29b      	uxth	r3, r3
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	2103      	movs	r1, #3
 8000724:	fa01 f303 	lsl.w	r3, r1, r3
 8000728:	43db      	mvns	r3, r3
 800072a:	401a      	ands	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	68da      	ldr	r2, [r3, #12]
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	79db      	ldrb	r3, [r3, #7]
 8000738:	4619      	mov	r1, r3
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	431a      	orrs	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	3301      	adds	r3, #1
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	2b0f      	cmp	r3, #15
 8000752:	d985      	bls.n	8000660 <GPIO_Init+0x1c>
    }
  }
}
 8000754:	bf00      	nop
 8000756:	371c      	adds	r7, #28
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000760:	b480      	push	{r7}
 8000762:	b089      	sub	sp, #36	; 0x24
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
 8000774:	2302      	movs	r3, #2
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	2302      	movs	r3, #2
 800077e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000780:	4b47      	ldr	r3, [pc, #284]	; (80008a0 <RCC_GetClocksFreq+0x140>)
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	f003 030c 	and.w	r3, r3, #12
 8000788:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	2b04      	cmp	r3, #4
 800078e:	d007      	beq.n	80007a0 <RCC_GetClocksFreq+0x40>
 8000790:	2b08      	cmp	r3, #8
 8000792:	d009      	beq.n	80007a8 <RCC_GetClocksFreq+0x48>
 8000794:	2b00      	cmp	r3, #0
 8000796:	d13d      	bne.n	8000814 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a42      	ldr	r2, [pc, #264]	; (80008a4 <RCC_GetClocksFreq+0x144>)
 800079c:	601a      	str	r2, [r3, #0]
      break;
 800079e:	e03d      	b.n	800081c <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a41      	ldr	r2, [pc, #260]	; (80008a8 <RCC_GetClocksFreq+0x148>)
 80007a4:	601a      	str	r2, [r3, #0]
      break;
 80007a6:	e039      	b.n	800081c <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80007a8:	4b3d      	ldr	r3, [pc, #244]	; (80008a0 <RCC_GetClocksFreq+0x140>)
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	0d9b      	lsrs	r3, r3, #22
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80007b4:	4b3a      	ldr	r3, [pc, #232]	; (80008a0 <RCC_GetClocksFreq+0x140>)
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80007bc:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d00c      	beq.n	80007de <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80007c4:	4a38      	ldr	r2, [pc, #224]	; (80008a8 <RCC_GetClocksFreq+0x148>)
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80007cc:	4a34      	ldr	r2, [pc, #208]	; (80008a0 <RCC_GetClocksFreq+0x140>)
 80007ce:	6852      	ldr	r2, [r2, #4]
 80007d0:	0992      	lsrs	r2, r2, #6
 80007d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80007d6:	fb02 f303 	mul.w	r3, r2, r3
 80007da:	61fb      	str	r3, [r7, #28]
 80007dc:	e00b      	b.n	80007f6 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80007de:	4a31      	ldr	r2, [pc, #196]	; (80008a4 <RCC_GetClocksFreq+0x144>)
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e6:	4a2e      	ldr	r2, [pc, #184]	; (80008a0 <RCC_GetClocksFreq+0x140>)
 80007e8:	6852      	ldr	r2, [r2, #4]
 80007ea:	0992      	lsrs	r2, r2, #6
 80007ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80007f0:	fb02 f303 	mul.w	r3, r2, r3
 80007f4:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80007f6:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <RCC_GetClocksFreq+0x140>)
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	0c1b      	lsrs	r3, r3, #16
 80007fc:	f003 0303 	and.w	r3, r3, #3
 8000800:	3301      	adds	r3, #1
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000806:	69fa      	ldr	r2, [r7, #28]
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	fbb2 f2f3 	udiv	r2, r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	601a      	str	r2, [r3, #0]
      break;
 8000812:	e003      	b.n	800081c <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a23      	ldr	r2, [pc, #140]	; (80008a4 <RCC_GetClocksFreq+0x144>)
 8000818:	601a      	str	r2, [r3, #0]
      break;
 800081a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800081c:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <RCC_GetClocksFreq+0x140>)
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000824:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000826:	69bb      	ldr	r3, [r7, #24]
 8000828:	091b      	lsrs	r3, r3, #4
 800082a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800082c:	4a1f      	ldr	r2, [pc, #124]	; (80008ac <RCC_GetClocksFreq+0x14c>)
 800082e:	69bb      	ldr	r3, [r7, #24]
 8000830:	4413      	add	r3, r2
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	40da      	lsrs	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <RCC_GetClocksFreq+0x140>)
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800084c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800084e:	69bb      	ldr	r3, [r7, #24]
 8000850:	0a9b      	lsrs	r3, r3, #10
 8000852:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000854:	4a15      	ldr	r2, [pc, #84]	; (80008ac <RCC_GetClocksFreq+0x14c>)
 8000856:	69bb      	ldr	r3, [r7, #24]
 8000858:	4413      	add	r3, r2
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	40da      	lsrs	r2, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <RCC_GetClocksFreq+0x140>)
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000874:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000876:	69bb      	ldr	r3, [r7, #24]
 8000878:	0b5b      	lsrs	r3, r3, #13
 800087a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800087c:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <RCC_GetClocksFreq+0x14c>)
 800087e:	69bb      	ldr	r3, [r7, #24]
 8000880:	4413      	add	r3, r2
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	685a      	ldr	r2, [r3, #4]
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	40da      	lsrs	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	60da      	str	r2, [r3, #12]
}
 8000894:	bf00      	nop
 8000896:	3724      	adds	r7, #36	; 0x24
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	40023800 	.word	0x40023800
 80008a4:	00f42400 	.word	0x00f42400
 80008a8:	007a1200 	.word	0x007a1200
 80008ac:	20000000 	.word	0x20000000

080008b0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	460b      	mov	r3, r1
 80008ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008bc:	78fb      	ldrb	r3, [r7, #3]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d006      	beq.n	80008d0 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80008c2:	490a      	ldr	r1, [pc, #40]	; (80008ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80008c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80008ce:	e006      	b.n	80008de <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80008d0:	4906      	ldr	r1, [pc, #24]	; (80008ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <RCC_AHB1PeriphClockCmd+0x3c>)
 80008d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	43db      	mvns	r3, r3
 80008da:	4013      	ands	r3, r2
 80008dc:	630b      	str	r3, [r1, #48]	; 0x30
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800

080008f0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80008fc:	78fb      	ldrb	r3, [r7, #3]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d006      	beq.n	8000910 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000902:	490a      	ldr	r1, [pc, #40]	; (800092c <RCC_APB1PeriphClockCmd+0x3c>)
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <RCC_APB1PeriphClockCmd+0x3c>)
 8000906:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4313      	orrs	r3, r2
 800090c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800090e:	e006      	b.n	800091e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000910:	4906      	ldr	r1, [pc, #24]	; (800092c <RCC_APB1PeriphClockCmd+0x3c>)
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <RCC_APB1PeriphClockCmd+0x3c>)
 8000914:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	43db      	mvns	r3, r3
 800091a:	4013      	ands	r3, r2
 800091c:	640b      	str	r3, [r1, #64]	; 0x40
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800

08000930 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a29      	ldr	r2, [pc, #164]	; (80009ec <TIM_TimeBaseInit+0xbc>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d013      	beq.n	8000974 <TIM_TimeBaseInit+0x44>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a28      	ldr	r2, [pc, #160]	; (80009f0 <TIM_TimeBaseInit+0xc0>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d00f      	beq.n	8000974 <TIM_TimeBaseInit+0x44>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800095a:	d00b      	beq.n	8000974 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a25      	ldr	r2, [pc, #148]	; (80009f4 <TIM_TimeBaseInit+0xc4>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d007      	beq.n	8000974 <TIM_TimeBaseInit+0x44>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a24      	ldr	r2, [pc, #144]	; (80009f8 <TIM_TimeBaseInit+0xc8>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d003      	beq.n	8000974 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a23      	ldr	r2, [pc, #140]	; (80009fc <TIM_TimeBaseInit+0xcc>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d108      	bne.n	8000986 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000974:	89fb      	ldrh	r3, [r7, #14]
 8000976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800097a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	885a      	ldrh	r2, [r3, #2]
 8000980:	89fb      	ldrh	r3, [r7, #14]
 8000982:	4313      	orrs	r3, r2
 8000984:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a1d      	ldr	r2, [pc, #116]	; (8000a00 <TIM_TimeBaseInit+0xd0>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d00c      	beq.n	80009a8 <TIM_TimeBaseInit+0x78>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a1c      	ldr	r2, [pc, #112]	; (8000a04 <TIM_TimeBaseInit+0xd4>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d008      	beq.n	80009a8 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000996:	89fb      	ldrh	r3, [r7, #14]
 8000998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800099c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	891a      	ldrh	r2, [r3, #8]
 80009a2:	89fb      	ldrh	r3, [r7, #14]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	89fa      	ldrh	r2, [r7, #14]
 80009ac:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685a      	ldr	r2, [r3, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	881a      	ldrh	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <TIM_TimeBaseInit+0xbc>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d003      	beq.n	80009ce <TIM_TimeBaseInit+0x9e>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a09      	ldr	r2, [pc, #36]	; (80009f0 <TIM_TimeBaseInit+0xc0>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d104      	bne.n	80009d8 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	7a9b      	ldrb	r3, [r3, #10]
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2201      	movs	r2, #1
 80009dc:	829a      	strh	r2, [r3, #20]
}
 80009de:	bf00      	nop
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40010000 	.word	0x40010000
 80009f0:	40010400 	.word	0x40010400
 80009f4:	40000400 	.word	0x40000400
 80009f8:	40000800 	.word	0x40000800
 80009fc:	40000c00 	.word	0x40000c00
 8000a00:	40001000 	.word	0x40001000
 8000a04:	40001400 	.word	0x40001400

08000a08 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a16:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2200      	movs	r2, #0
 8000a22:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	729a      	strb	r2, [r3, #10]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	460b      	mov	r3, r1
 8000a46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a48:	78fb      	ldrb	r3, [r7, #3]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d008      	beq.n	8000a60 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000a5e:	e007      	b.n	8000a70 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	f023 0301 	bic.w	r3, r3, #1
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	801a      	strh	r2, [r3, #0]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	460b      	mov	r3, r1
 8000a86:	807b      	strh	r3, [r7, #2]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a8c:	787b      	ldrb	r3, [r7, #1]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d008      	beq.n	8000aa4 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	899b      	ldrh	r3, [r3, #12]
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	887b      	ldrh	r3, [r7, #2]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000aa2:	e009      	b.n	8000ab8 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	899b      	ldrh	r3, [r3, #12]
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	887b      	ldrh	r3, [r7, #2]
 8000aac:	43db      	mvns	r3, r3
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	819a      	strh	r2, [r3, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	460b      	mov	r3, r1
 8000ace:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	81bb      	strh	r3, [r7, #12]
 8000ad8:	2300      	movs	r3, #0
 8000ada:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	8a1b      	ldrh	r3, [r3, #16]
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	887b      	ldrh	r3, [r7, #2]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	899b      	ldrh	r3, [r3, #12]
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	887b      	ldrh	r3, [r7, #2]
 8000af0:	4013      	ands	r3, r2
 8000af2:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000af4:	89bb      	ldrh	r3, [r7, #12]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d005      	beq.n	8000b06 <TIM_GetITStatus+0x42>
 8000afa:	897b      	ldrh	r3, [r7, #10]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d002      	beq.n	8000b06 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000b00:	2301      	movs	r3, #1
 8000b02:	73fb      	strb	r3, [r7, #15]
 8000b04:	e001      	b.n	8000b0a <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000b06:	2300      	movs	r3, #0
 8000b08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	460b      	mov	r3, r1
 8000b22:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000b24:	887b      	ldrh	r3, [r7, #2]
 8000b26:	43db      	mvns	r3, r3
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	821a      	strh	r2, [r3, #16]
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	460b      	mov	r3, r1
 8000b44:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	889b      	ldrh	r3, [r3, #4]
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	889b      	ldrh	r3, [r3, #4]
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	887b      	ldrh	r3, [r7, #2]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	809a      	strh	r2, [r3, #4]
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
	...

08000b74 <main>:
uint32_t TimeIND = 0;

//Varibale para mostrar en el Display la señal que está siendo generada:
uint32_t Signal = 0;
int main(void)
{
 8000b74:	b5b0      	push	{r4, r5, r7, lr}
 8000b76:	b090      	sub	sp, #64	; 0x40
 8000b78:	af00      	add	r7, sp, #0
	//Valores que conforma la senal sinusoidal a representar:
	const uint16_t SineWave32Bits[Res32Bit] = {
 8000b7a:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <main+0x88>)
 8000b7c:	463c      	mov	r4, r7
 8000b7e:	461d      	mov	r5, r3
 8000b80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
									  599, 344, 155, 38, 0, 38, 155, 344, 599, 909, 1263, 1647};

/*------------------------------------------------------------------------------
CONFIGURACION DEL MICRO:
------------------------------------------------------------------------------*/
	SystemInit();
 8000b94:	f000 fd3c 	bl	8001610 <SystemInit>

	//Inicializacion del DISPLAY LCD:
	INIT_LCD_2x16(LCD_2X16);
 8000b98:	4819      	ldr	r0, [pc, #100]	; (8000c00 <main+0x8c>)
 8000b9a:	f000 f8cd 	bl	8000d38 <INIT_LCD_2x16>

	//Inicilizacion del DAC para generar una onda senoidal:
	INIT_DAC_SINE(DAC_Port, DAC_Pin);
 8000b9e:	2120      	movs	r1, #32
 8000ba0:	4818      	ldr	r0, [pc, #96]	; (8000c04 <main+0x90>)
 8000ba2:	f000 f99d 	bl	8000ee0 <INIT_DAC_SINE>

	//Inicializacion de interrupcion por tiempo cada 50 mseg:
	INIT_SYSTICK(TimeINT_Systick);
 8000ba6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8000c08 <main+0x94>
 8000baa:	f000 f91f 	bl	8000dec <INIT_SYSTICK>

	//Inicialización del TIM3 para refresco del LCD:
	INIT_TIM3();
 8000bae:	f000 f93d 	bl	8000e2c <INIT_TIM3>
	SET_TIM3(TimeBase, Freq);
 8000bb2:	2104      	movs	r1, #4
 8000bb4:	4815      	ldr	r0, [pc, #84]	; (8000c0c <main+0x98>)
 8000bb6:	f000 f951 	bl	8000e5c <SET_TIM3>
BUCLE PRINCIPAL:
------------------------------------------------------------------------------*/
    while(1)
    {
    	/*Si pasaron 10 segundos: */
    	if(TimeIND == TenSeconds)
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <main+0x9c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2bc8      	cmp	r3, #200	; 0xc8
 8000bc0:	d1fb      	bne.n	8000bba <main+0x46>
    	{
    		/*Se resetea la variable del Systick: */
    		TimeIND = 0;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <main+0x9c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]

    		/*Se prende la primer senal de 750 Hz en la primer pasada:*/
    		if(Signal == 0)
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <main+0xa0>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d10a      	bne.n	8000be6 <main+0x72>
    		{
    			DAC_SINE32BIT(DAC_Port, DAC_Pin, SineWave32Bits, Signal1Freq);
 8000bd0:	463a      	mov	r2, r7
 8000bd2:	f240 23ee 	movw	r3, #750	; 0x2ee
 8000bd6:	2120      	movs	r1, #32
 8000bd8:	480a      	ldr	r0, [pc, #40]	; (8000c04 <main+0x90>)
 8000bda:	f000 f9a9 	bl	8000f30 <DAC_SINE32BIT>
    			Signal = 1;
 8000bde:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <main+0xa0>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	e7e9      	b.n	8000bba <main+0x46>
    		}
    		/*Se prende la segunda senal de 2500 Hz en la segunda pasada y luego se alternan:*/
			else
			{
				DAC_SINE32BIT(DAC_Port, DAC_Pin, SineWave32Bits, Signal2Freq);
 8000be6:	463a      	mov	r2, r7
 8000be8:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000bec:	2120      	movs	r1, #32
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <main+0x90>)
 8000bf0:	f000 f99e 	bl	8000f30 <DAC_SINE32BIT>
				Signal = 0;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <main+0xa0>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
    	if(TimeIND == TenSeconds)
 8000bfa:	e7de      	b.n	8000bba <main+0x46>
 8000bfc:	080018cc 	.word	0x080018cc
 8000c00:	20000010 	.word	0x20000010
 8000c04:	40020000 	.word	0x40020000
 8000c08:	3d4ccccd 	.word	0x3d4ccccd
 8000c0c:	00030d40 	.word	0x00030d40
 8000c10:	200000b8 	.word	0x200000b8
 8000c14:	200000bc 	.word	0x200000bc

08000c18 <SysTick_Handler>:
/*------------------------------------------------------------------------------
INTERRUPCIONES:
------------------------------------------------------------------------------*/
/*Interrupcion por tiempo - Systick cada 50mseg:*/
void SysTick_Handler()
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
	/*Se actualiza la base de tiempo: */
	TimeIND++;
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <SysTick_Handler+0x18>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	3301      	adds	r3, #1
 8000c22:	4a03      	ldr	r2, [pc, #12]	; (8000c30 <SysTick_Handler+0x18>)
 8000c24:	6013      	str	r3, [r2, #0]
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	200000b8 	.word	0x200000b8

08000c34 <TIM3_IRQHandler>:

/*Interrupción por agotamiento de cuenta del TIM3 cada 250mseg (4 Hz): */
void TIM3_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM3, TIM_IT_CC1) != RESET) {
 8000c38:	2102      	movs	r1, #2
 8000c3a:	4813      	ldr	r0, [pc, #76]	; (8000c88 <TIM3_IRQHandler+0x54>)
 8000c3c:	f7ff ff42 	bl	8000ac4 <TIM_GetITStatus>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d01d      	beq.n	8000c82 <TIM3_IRQHandler+0x4e>
		TIM_ClearITPendingBit(TIM3, TIM_IT_CC1);
 8000c46:	2102      	movs	r1, #2
 8000c48:	480f      	ldr	r0, [pc, #60]	; (8000c88 <TIM3_IRQHandler+0x54>)
 8000c4a:	f7ff ff65 	bl	8000b18 <TIM_ClearITPendingBit>

		/*Refresco del LCD: */
		CLEAR_LCD_2x16(LCD_2X16);
 8000c4e:	480f      	ldr	r0, [pc, #60]	; (8000c8c <TIM3_IRQHandler+0x58>)
 8000c50:	f000 f89a 	bl	8000d88 <CLEAR_LCD_2x16>

		/*Mostrar mensaje generico: */
		PRINT_LCD_2x16(LCD_2X16, 0, 0, "TDII  -  E02 TP5");
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <TIM3_IRQHandler+0x5c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	480c      	ldr	r0, [pc, #48]	; (8000c8c <TIM3_IRQHandler+0x58>)
 8000c5c:	f000 f8a4 	bl	8000da8 <PRINT_LCD_2x16>

		/*Mostrar mensaje señal 1 de 750 Hz */
		if(Signal == 0)
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <TIM3_IRQHandler+0x60>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d106      	bne.n	8000c76 <TIM3_IRQHandler+0x42>
			PRINT_LCD_2x16(LCD_2X16, 0, 1, "SENAL DE 750 Hz");
 8000c68:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <TIM3_IRQHandler+0x64>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4807      	ldr	r0, [pc, #28]	; (8000c8c <TIM3_IRQHandler+0x58>)
 8000c70:	f000 f89a 	bl	8000da8 <PRINT_LCD_2x16>
		else
			PRINT_LCD_2x16(LCD_2X16, 0, 1, "SENAL DE 2.5 kH");
	}
}
 8000c74:	e005      	b.n	8000c82 <TIM3_IRQHandler+0x4e>
			PRINT_LCD_2x16(LCD_2X16, 0, 1, "SENAL DE 2.5 kH");
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <TIM3_IRQHandler+0x68>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4803      	ldr	r0, [pc, #12]	; (8000c8c <TIM3_IRQHandler+0x58>)
 8000c7e:	f000 f893 	bl	8000da8 <PRINT_LCD_2x16>
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40000400 	.word	0x40000400
 8000c8c:	20000010 	.word	0x20000010
 8000c90:	0800190c 	.word	0x0800190c
 8000c94:	200000bc 	.word	0x200000bc
 8000c98:	08001920 	.word	0x08001920
 8000c9c:	08001930 	.word	0x08001930

08000ca0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	da0b      	bge.n	8000ccc <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000cb4:	490d      	ldr	r1, [pc, #52]	; (8000cec <NVIC_SetPriority+0x4c>)
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	f003 030f 	and.w	r3, r3, #15
 8000cbc:	3b04      	subs	r3, #4
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	0112      	lsls	r2, r2, #4
 8000cc4:	b2d2      	uxtb	r2, r2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000cca:	e009      	b.n	8000ce0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000ccc:	4908      	ldr	r1, [pc, #32]	; (8000cf0 <NVIC_SetPriority+0x50>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	683a      	ldr	r2, [r7, #0]
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00
 8000cf0:	e000e100 	.word	0xe000e100

08000cf4 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d04:	d301      	bcc.n	8000d0a <SysTick_Config+0x16>
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00f      	b.n	8000d2a <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <SysTick_Config+0x40>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000d12:	210f      	movs	r1, #15
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d18:	f7ff ffc2 	bl	8000ca0 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <SysTick_Config+0x40>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d22:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <SysTick_Config+0x40>)
 8000d24:	2207      	movs	r2, #7
 8000d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	e000e010 	.word	0xe000e010

08000d38 <INIT_LCD_2x16>:
  	  	  	  	  	{TLCD_D7 ,GPIOF,GPIO_Pin_7  ,RCC_AHB1Periph_GPIOF,Bit_RESET},};
	* @ej
		- INIT_LCD_2x16(LCD_2X16);
******************************************************************************/
void INIT_LCD_2x16(LCD_2X16_t* LCD_2X16)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	  //Inicialización de los pines del LCD:
	  P_LCD_2x16_InitIO(LCD_2X16);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f000 f9cf 	bl	80010e4 <P_LCD_2x16_InitIO>
	  // kleine Pause
	  P_LCD_2x16_Delay(TLCD_INIT_PAUSE);
 8000d46:	480f      	ldr	r0, [pc, #60]	; (8000d84 <INIT_LCD_2x16+0x4c>)
 8000d48:	f000 fa5f 	bl	800120a <P_LCD_2x16_Delay>
	  // Init Sequenz starten
	  P_LCD_2x16_InitSequenz(LCD_2X16);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f000 fa6c 	bl	800122a <P_LCD_2x16_InitSequenz>
	  // LCD-Settings einstellen
	  P_LCD_2x16_Cmd(TLCD_CMD_INIT_DISPLAY, LCD_2X16);
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	2028      	movs	r0, #40	; 0x28
 8000d56:	f000 fac4 	bl	80012e2 <P_LCD_2x16_Cmd>
	  P_LCD_2x16_Cmd(TLCD_CMD_ENTRY_MODE, LCD_2X16);
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	2006      	movs	r0, #6
 8000d5e:	f000 fac0 	bl	80012e2 <P_LCD_2x16_Cmd>
	  // Display einschalten
	  P_LCD_2x16_Cmd(TLCD_CMD_DISP_M1, LCD_2X16);
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	200c      	movs	r0, #12
 8000d66:	f000 fabc 	bl	80012e2 <P_LCD_2x16_Cmd>
	  // Display l�schen
	  P_LCD_2x16_Cmd(TLCD_CMD_CLEAR, LCD_2X16);
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f000 fab8 	bl	80012e2 <P_LCD_2x16_Cmd>
	  // kleine Pause
	  P_LCD_2x16_Delay(TLCD_PAUSE);
 8000d72:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d76:	f000 fa48 	bl	800120a <P_LCD_2x16_Delay>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	000186a0 	.word	0x000186a0

08000d88 <CLEAR_LCD_2x16>:
  	  	  	  	  	{TLCD_D7 ,GPIOF,GPIO_Pin_7  ,RCC_AHB1Periph_GPIOF,Bit_RESET},};
	* @ej
		- UB_LCD_2x16_Clear(LCD_2X16);
******************************************************************************/
void CLEAR_LCD_2x16(LCD_2X16_t* LCD_2X16)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  // Display l�schen
  P_LCD_2x16_Cmd(TLCD_CMD_CLEAR, LCD_2X16);
 8000d90:	6879      	ldr	r1, [r7, #4]
 8000d92:	2001      	movs	r0, #1
 8000d94:	f000 faa5 	bl	80012e2 <P_LCD_2x16_Cmd>
  // kleine Pause
  P_LCD_2x16_Delay(TLCD_PAUSE);
 8000d98:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d9c:	f000 fa35 	bl	800120a <P_LCD_2x16_Delay>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <PRINT_LCD_2x16>:

	* @ej
		- PRINT_LCD_2x16(LCD_2X16, 0, 0, STR);
******************************************************************************/
void PRINT_LCD_2x16(LCD_2X16_t* LCD_2X16, uint8_t x, uint8_t y, char *ptr)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	460b      	mov	r3, r1
 8000db4:	72fb      	strb	r3, [r7, #11]
 8000db6:	4613      	mov	r3, r2
 8000db8:	72bb      	strb	r3, [r7, #10]
  // Cursor setzen
  P_LCD_2x16_Cursor(LCD_2X16,x,y);
 8000dba:	7aba      	ldrb	r2, [r7, #10]
 8000dbc:	7afb      	ldrb	r3, [r7, #11]
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	68f8      	ldr	r0, [r7, #12]
 8000dc2:	f000 fb11 	bl	80013e8 <P_LCD_2x16_Cursor>
  // kompletten String ausgeben
  while (*ptr != 0) {
 8000dc6:	e008      	b.n	8000dda <PRINT_LCD_2x16+0x32>
    P_LCD_2x16_Data(*ptr, LCD_2X16);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	68f9      	ldr	r1, [r7, #12]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 fb30 	bl	8001434 <P_LCD_2x16_Data>
    ptr++;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	607b      	str	r3, [r7, #4]
  while (*ptr != 0) {
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1f2      	bne.n	8000dc8 <PRINT_LCD_2x16+0x20>
  }
}
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <INIT_SYSTICK>:

	* @ej
		- INIT_SYSTICK(1/1000); //Interrupcion cada 1 mseg.
******************************************************************************/
void INIT_SYSTICK(float div)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	ed87 0a01 	vstr	s0, [r7, #4]
	SysTick_Config(SystemCoreClock * div);
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <INIT_SYSTICK+0x3c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	ee07 3a90 	vmov	s15, r3
 8000dfe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e02:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e0e:	ee17 0a90 	vmov	r0, s15
 8000e12:	f7ff ff6f 	bl	8000cf4 <SysTick_Config>
	RCC_ClocksTypeDef Clocks_Values;
	RCC_GetClocksFreq(&Clocks_Values);
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fca0 	bl	8000760 <RCC_GetClocksFreq>
}
 8000e20:	bf00      	nop
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000088 	.word	0x20000088

08000e2c <INIT_TIM3>:
	* @param
	* @ej
		- INIT_TIM4();
******************************************************************************/
void INIT_TIM3()
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	/* TIM3 clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8000e32:	2101      	movs	r1, #1
 8000e34:	2002      	movs	r0, #2
 8000e36:	f7ff fd5b 	bl	80008f0 <RCC_APB1PeriphClockCmd>

	/* Enable the TIM3 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 8000e3a:	231d      	movs	r3, #29
 8000e3c:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8000e42:	2301      	movs	r3, #1
 8000e44:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000e46:	2301      	movs	r3, #1
 8000e48:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff f9cd 	bl	80001ec <NVIC_Init>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <SET_TIM3>:

	* @ej
		- INIT_TIM4(GPIOX, GPIO_Pin_X); //Inicialización del Pin PXXX como TIMER4.
******************************************************************************/
void SET_TIM3(uint32_t TimeBase, uint32_t Freq)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
	uint16_t PrescalerValue = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	81fb      	strh	r3, [r7, #14]

	//Actualización de los valores del TIM4:
	SystemCoreClockUpdate();
 8000e6a:	f000 fc07 	bl	800167c <SystemCoreClockUpdate>
	TIM_ITConfig(TIM3, TIM_IT_CC1, DISABLE);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2102      	movs	r1, #2
 8000e72:	4818      	ldr	r0, [pc, #96]	; (8000ed4 <SET_TIM3+0x78>)
 8000e74:	f7ff fe02 	bl	8000a7c <TIM_ITConfig>
	TIM_Cmd(TIM3, DISABLE);
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4816      	ldr	r0, [pc, #88]	; (8000ed4 <SET_TIM3+0x78>)
 8000e7c:	f7ff fdde 	bl	8000a3c <TIM_Cmd>

	/* Compute the prescaler value */
	PrescalerValue = (uint16_t) ((SystemCoreClock / 2) / TimeBase) - 1;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <SET_TIM3+0x7c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	085a      	lsrs	r2, r3, #1
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	81fb      	strh	r3, [r7, #14]

	/* Time base configuration */
	TIM_TimeBaseStructure.TIM_Period = TimeBase / Freq - 1;
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <SET_TIM3+0x80>)
 8000e9e:	6053      	str	r3, [r2, #4]
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 8000ea0:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <SET_TIM3+0x80>)
 8000ea2:	89fb      	ldrh	r3, [r7, #14]
 8000ea4:	8013      	strh	r3, [r2, #0]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <SET_TIM3+0x80>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	811a      	strh	r2, [r3, #8]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <SET_TIM3+0x80>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	805a      	strh	r2, [r3, #2]

	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 8000eb2:	490a      	ldr	r1, [pc, #40]	; (8000edc <SET_TIM3+0x80>)
 8000eb4:	4807      	ldr	r0, [pc, #28]	; (8000ed4 <SET_TIM3+0x78>)
 8000eb6:	f7ff fd3b 	bl	8000930 <TIM_TimeBaseInit>

	/* TIM Interrupts enable */
	TIM_ITConfig(TIM3, TIM_IT_CC1, ENABLE);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <SET_TIM3+0x78>)
 8000ec0:	f7ff fddc 	bl	8000a7c <TIM_ITConfig>

	/* TIM3 enable counter */
	TIM_Cmd(TIM3, ENABLE);
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <SET_TIM3+0x78>)
 8000ec8:	f7ff fdb8 	bl	8000a3c <TIM_Cmd>
}
 8000ecc:	bf00      	nop
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40000400 	.word	0x40000400
 8000ed8:	20000088 	.word	0x20000088
 8000edc:	200000c0 	.word	0x200000c0

08000ee0 <INIT_DAC_SINE>:

	* @ej
		- INIT_DAC_Sine(GPIOX, GPIO_Pin_X); //Inicialización del Pin PXXX como DAC.
******************************************************************************/
void INIT_DAC_SINE(GPIO_TypeDef* Port, uint16_t Pin)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStructure;

	/* DMA1 and DAC clock enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 8000eec:	2101      	movs	r1, #1
 8000eee:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000ef2:	f7ff fcdd 	bl	80008b0 <RCC_AHB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8000efc:	f7ff fcf8 	bl	80008f0 <RCC_APB1PeriphClockCmd>

	/* Enable GPIO clock */
	uint32_t Clock;
	Clock = FIND_CLOCK(Port);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f000 f8a5 	bl	8001050 <FIND_CLOCK>
 8000f06:	6178      	str	r0, [r7, #20]
	RCC_AHB1PeriphClockCmd(Clock, ENABLE);
 8000f08:	2101      	movs	r1, #1
 8000f0a:	6978      	ldr	r0, [r7, #20]
 8000f0c:	f7ff fcd0 	bl	80008b0 <RCC_AHB1PeriphClockCmd>

	/* Configura el Pin como salida Analogica */
	GPIO_InitStructure.GPIO_Pin = Pin;
 8000f10:	887b      	ldrh	r3, [r7, #2]
 8000f12:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8000f14:	2303      	movs	r3, #3
 8000f16:	743b      	strb	r3, [r7, #16]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	74fb      	strb	r3, [r7, #19]
	GPIO_Init(Port, &GPIO_InitStructure);
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	4619      	mov	r1, r3
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff fb8e 	bl	8000644 <GPIO_Init>
}
 8000f28:	bf00      	nop
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <DAC_SINE32BIT>:

	* @ej
		- INIT_DAC_Sine(GPIOX, GPIO_Pin_X); //Inicialización del Pin PXXX como DAC.
******************************************************************************/
void DAC_SINE32BIT(GPIO_TypeDef* Port, uint16_t Pin, const uint16_t *SineWave ,uint32_t Freq)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b096      	sub	sp, #88	; 0x58
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	817b      	strh	r3, [r7, #10]
	/*Configuración del TIM6 como base de tiempo: */
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

	/* TIM6 Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 8000f40:	2101      	movs	r1, #1
 8000f42:	2010      	movs	r0, #16
 8000f44:	f7ff fcd4 	bl	80008f0 <RCC_APB1PeriphClockCmd>
	/* Time base configuration */
	TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 8000f48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fd5b 	bl	8000a08 <TIM_TimeBaseStructInit>
	 * frecuencia definida.
	 *
	 * Reemplazando TIM6CLK por su definicion:
	 * TIM_Period = (SystemCoreClock/(2*Freq))-1
	*/
	TIM_TimeBaseStructure.TIM_Period = (SystemCoreClock/(2*Freq))-1;
 8000f52:	4b3a      	ldr	r3, [pc, #232]	; (800103c <DAC_SINE32BIT+0x10c>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	653b      	str	r3, [r7, #80]	; 0x50
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);
 8000f74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4831      	ldr	r0, [pc, #196]	; (8001040 <DAC_SINE32BIT+0x110>)
 8000f7c:	f7ff fcd8 	bl	8000930 <TIM_TimeBaseInit>

	/* TIM6 TRGO selection */
	TIM_SelectOutputTrigger(TIM6, TIM_TRGOSource_Update);
 8000f80:	2120      	movs	r1, #32
 8000f82:	482f      	ldr	r0, [pc, #188]	; (8001040 <DAC_SINE32BIT+0x110>)
 8000f84:	f7ff fdd9 	bl	8000b3a <TIM_SelectOutputTrigger>

	/* TIM6 enable counter */
	TIM_Cmd(TIM6, ENABLE);
 8000f88:	2101      	movs	r1, #1
 8000f8a:	482d      	ldr	r0, [pc, #180]	; (8001040 <DAC_SINE32BIT+0x110>)
 8000f8c:	f7ff fd56 	bl	8000a3c <TIM_Cmd>

	/*Configuración del DMA para la generacion independiente de la senal: */
	DMA_InitTypeDef DMA_InitStructure;

	/* DAC channel Configuration */
	DAC_InitStructure.DAC_Trigger = DAC_Trigger_T6_TRGO;
 8000f90:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <DAC_SINE32BIT+0x114>)
 8000f92:	2204      	movs	r2, #4
 8000f94:	601a      	str	r2, [r3, #0]
	DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8000f96:	4b2b      	ldr	r3, [pc, #172]	; (8001044 <DAC_SINE32BIT+0x114>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	605a      	str	r2, [r3, #4]
	DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Disable;
 8000f9c:	4b29      	ldr	r3, [pc, #164]	; (8001044 <DAC_SINE32BIT+0x114>)
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	60da      	str	r2, [r3, #12]
	DAC_Init(DAC_Channel_2, &DAC_InitStructure);
 8000fa2:	4928      	ldr	r1, [pc, #160]	; (8001044 <DAC_SINE32BIT+0x114>)
 8000fa4:	2010      	movs	r0, #16
 8000fa6:	f7ff f983 	bl	80002b0 <DAC_Init>

	 /* DMA1_Stream6 channel7 configuration*/
	DMA_DeInit(DMA1_Stream6);
 8000faa:	4827      	ldr	r0, [pc, #156]	; (8001048 <DAC_SINE32BIT+0x118>)
 8000fac:	f7ff fa02 	bl	80003b4 <DMA_DeInit>
	DMA_InitStructure.DMA_Channel = DMA_Channel_7;
 8000fb0:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8000fb4:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) DAC_DHR12R2_ADDRESS;
 8000fb6:	4b25      	ldr	r3, [pc, #148]	; (800104c <DAC_SINE32BIT+0x11c>)
 8000fb8:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) &SineWave;
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8000fbe:	2340      	movs	r3, #64	; 0x40
 8000fc0:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_BufferSize = Res32Bit;
 8000fc2:	2320      	movs	r3, #32
 8000fc4:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8000fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8000fd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8000fd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fda:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8000fdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe0:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8000fe2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe6:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 8000fec:	2301      	movs	r3, #1
 8000fee:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	64bb      	str	r3, [r7, #72]	; 0x48
	DMA_Init(DMA1_Stream6, &DMA_InitStructure);
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4812      	ldr	r0, [pc, #72]	; (8001048 <DAC_SINE32BIT+0x118>)
 8001000:	f7ff faac 	bl	800055c <DMA_Init>

	/* Enable DMA1_Stream6 */
	DMA_Cmd(DMA1_Stream6, ENABLE);
 8001004:	2101      	movs	r1, #1
 8001006:	4810      	ldr	r0, [pc, #64]	; (8001048 <DAC_SINE32BIT+0x118>)
 8001008:	f7ff fb00 	bl	800060c <DMA_Cmd>

	/* Enable DAC Channel */
	DAC_Cmd(FIND_DAC_CHANNEL(Port,Pin), ENABLE);
 800100c:	897b      	ldrh	r3, [r7, #10]
 800100e:	4619      	mov	r1, r3
 8001010:	68f8      	ldr	r0, [r7, #12]
 8001012:	f000 fa93 	bl	800153c <FIND_DAC_CHANNEL>
 8001016:	4603      	mov	r3, r0
 8001018:	2101      	movs	r1, #1
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff f97c 	bl	8000318 <DAC_Cmd>

	/* Enable DMA for DAC Channel */
	DAC_DMACmd(FIND_DAC_CHANNEL(Port,Pin), ENABLE);
 8001020:	897b      	ldrh	r3, [r7, #10]
 8001022:	4619      	mov	r1, r3
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f000 fa89 	bl	800153c <FIND_DAC_CHANNEL>
 800102a:	4603      	mov	r3, r0
 800102c:	2101      	movs	r1, #1
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff f998 	bl	8000364 <DAC_DMACmd>
}
 8001034:	bf00      	nop
 8001036:	3758      	adds	r7, #88	; 0x58
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000088 	.word	0x20000088
 8001040:	40001000 	.word	0x40001000
 8001044:	200000cc 	.word	0x200000cc
 8001048:	400260a0 	.word	0x400260a0
 800104c:	40007414 	.word	0x40007414

08001050 <FIND_CLOCK>:
/*------------------------------------------------------------------------------
 FUNCIONES INTERNAS:
------------------------------------------------------------------------------*/
//General:
uint32_t FIND_CLOCK(GPIO_TypeDef* Port)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	uint32_t Clock;

	if		(Port == GPIOA) Clock = RCC_AHB1Periph_GPIOA;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <FIND_CLOCK+0x78>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d102      	bne.n	8001066 <FIND_CLOCK+0x16>
 8001060:	2301      	movs	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	e028      	b.n	80010b8 <FIND_CLOCK+0x68>
	else if (Port == GPIOB) Clock = RCC_AHB1Periph_GPIOB;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a18      	ldr	r2, [pc, #96]	; (80010cc <FIND_CLOCK+0x7c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d102      	bne.n	8001074 <FIND_CLOCK+0x24>
 800106e:	2302      	movs	r3, #2
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	e021      	b.n	80010b8 <FIND_CLOCK+0x68>
	else if (Port == GPIOC) Clock = RCC_AHB1Periph_GPIOC;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a16      	ldr	r2, [pc, #88]	; (80010d0 <FIND_CLOCK+0x80>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d102      	bne.n	8001082 <FIND_CLOCK+0x32>
 800107c:	2304      	movs	r3, #4
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	e01a      	b.n	80010b8 <FIND_CLOCK+0x68>
	else if (Port == GPIOD) Clock = RCC_AHB1Periph_GPIOD;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a13      	ldr	r2, [pc, #76]	; (80010d4 <FIND_CLOCK+0x84>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d102      	bne.n	8001090 <FIND_CLOCK+0x40>
 800108a:	2308      	movs	r3, #8
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	e013      	b.n	80010b8 <FIND_CLOCK+0x68>
	else if (Port == GPIOE) Clock = RCC_AHB1Periph_GPIOE;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a11      	ldr	r2, [pc, #68]	; (80010d8 <FIND_CLOCK+0x88>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d102      	bne.n	800109e <FIND_CLOCK+0x4e>
 8001098:	2310      	movs	r3, #16
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	e00c      	b.n	80010b8 <FIND_CLOCK+0x68>
	else if (Port == GPIOF) Clock = RCC_AHB1Periph_GPIOF;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a0e      	ldr	r2, [pc, #56]	; (80010dc <FIND_CLOCK+0x8c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d102      	bne.n	80010ac <FIND_CLOCK+0x5c>
 80010a6:	2320      	movs	r3, #32
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	e005      	b.n	80010b8 <FIND_CLOCK+0x68>
	else if (Port == GPIOG) Clock = RCC_AHB1Periph_GPIOG;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <FIND_CLOCK+0x90>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d101      	bne.n	80010b8 <FIND_CLOCK+0x68>
 80010b4:	2340      	movs	r3, #64	; 0x40
 80010b6:	60fb      	str	r3, [r7, #12]
	return Clock;
 80010b8:	68fb      	ldr	r3, [r7, #12]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40020000 	.word	0x40020000
 80010cc:	40020400 	.word	0x40020400
 80010d0:	40020800 	.word	0x40020800
 80010d4:	40020c00 	.word	0x40020c00
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40021400 	.word	0x40021400
 80010e0:	40021800 	.word	0x40021800

080010e4 <P_LCD_2x16_InitIO>:
	return Channel;
}

//LCD:
void P_LCD_2x16_InitIO(LCD_2X16_t* LCD_2X16)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStructure;
	TLCD_NAME_t lcd_pin;

	for (lcd_pin = 0; lcd_pin < TLCD_ANZ; lcd_pin++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	75fb      	strb	r3, [r7, #23]
 80010f0:	e046      	b.n	8001180 <P_LCD_2x16_InitIO+0x9c>
	{
		//Habilitacion del Clock para cada PIN:
		RCC_AHB1PeriphClockCmd(LCD_2X16[lcd_pin].TLCD_CLK, ENABLE);
 80010f2:	7dfa      	ldrb	r2, [r7, #23]
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	461a      	mov	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	2101      	movs	r1, #1
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fbd2 	bl	80008b0 <RCC_AHB1PeriphClockCmd>

		//Configuracion como salidas digitales:
		GPIO_InitStructure.GPIO_Pin = LCD_2X16[lcd_pin].TLCD_PIN;
 800110c:	7dfa      	ldrb	r2, [r7, #23]
 800110e:	4613      	mov	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4413      	add	r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	461a      	mov	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4413      	add	r3, r2
 800111c:	891b      	ldrh	r3, [r3, #8]
 800111e:	60fb      	str	r3, [r7, #12]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001120:	2301      	movs	r3, #1
 8001122:	743b      	strb	r3, [r7, #16]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001124:	2300      	movs	r3, #0
 8001126:	74bb      	strb	r3, [r7, #18]
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001128:	2301      	movs	r3, #1
 800112a:	74fb      	strb	r3, [r7, #19]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800112c:	2302      	movs	r3, #2
 800112e:	747b      	strb	r3, [r7, #17]
		GPIO_Init(LCD_2X16[lcd_pin].TLCD_PORT, &GPIO_InitStructure);
 8001130:	7dfa      	ldrb	r2, [r7, #23]
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	461a      	mov	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4413      	add	r3, r2
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f107 020c 	add.w	r2, r7, #12
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fa7b 	bl	8000644 <GPIO_Init>

		//Default Wert einstellen
		if(LCD_2X16[lcd_pin].TLCD_INIT == Bit_RESET)
 800114e:	7dfa      	ldrb	r2, [r7, #23]
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	461a      	mov	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	7c1b      	ldrb	r3, [r3, #16]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d105      	bne.n	8001170 <P_LCD_2x16_InitIO+0x8c>
			P_LCD_2x16_PinLo(lcd_pin, LCD_2X16);
 8001164:	7dfb      	ldrb	r3, [r7, #23]
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	4618      	mov	r0, r3
 800116a:	f000 f810 	bl	800118e <P_LCD_2x16_PinLo>
 800116e:	e004      	b.n	800117a <P_LCD_2x16_InitIO+0x96>
		else
			P_LCD_2x16_PinHi(lcd_pin, LCD_2X16);
 8001170:	7dfb      	ldrb	r3, [r7, #23]
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4618      	mov	r0, r3
 8001176:	f000 f829 	bl	80011cc <P_LCD_2x16_PinHi>
	for (lcd_pin = 0; lcd_pin < TLCD_ANZ; lcd_pin++)
 800117a:	7dfb      	ldrb	r3, [r7, #23]
 800117c:	3301      	adds	r3, #1
 800117e:	75fb      	strb	r3, [r7, #23]
 8001180:	7dfb      	ldrb	r3, [r7, #23]
 8001182:	2b05      	cmp	r3, #5
 8001184:	d9b5      	bls.n	80010f2 <P_LCD_2x16_InitIO+0xe>
	}
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <P_LCD_2x16_PinLo>:

void P_LCD_2x16_PinLo(TLCD_NAME_t lcd_pin, LCD_2X16_t* LCD_2X16)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	6039      	str	r1, [r7, #0]
 8001198:	71fb      	strb	r3, [r7, #7]
  LCD_2X16[lcd_pin].TLCD_PORT->BSRRH = LCD_2X16[lcd_pin].TLCD_PIN;
 800119a:	79fa      	ldrb	r2, [r7, #7]
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	461a      	mov	r2, r3
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	4413      	add	r3, r2
 80011aa:	6859      	ldr	r1, [r3, #4]
 80011ac:	79fa      	ldrb	r2, [r7, #7]
 80011ae:	4613      	mov	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	461a      	mov	r2, r3
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	891b      	ldrh	r3, [r3, #8]
 80011be:	834b      	strh	r3, [r1, #26]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <P_LCD_2x16_PinHi>:

void P_LCD_2x16_PinHi(TLCD_NAME_t lcd_pin, LCD_2X16_t* LCD_2X16)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
  LCD_2X16[lcd_pin].TLCD_PORT->BSRRL = LCD_2X16[lcd_pin].TLCD_PIN;
 80011d8:	79fa      	ldrb	r2, [r7, #7]
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	461a      	mov	r2, r3
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	6859      	ldr	r1, [r3, #4]
 80011ea:	79fa      	ldrb	r2, [r7, #7]
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	461a      	mov	r2, r3
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	4413      	add	r3, r2
 80011fa:	891b      	ldrh	r3, [r3, #8]
 80011fc:	830b      	strh	r3, [r1, #24]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <P_LCD_2x16_Delay>:

void P_LCD_2x16_Delay(volatile uint32_t nCount)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  while(nCount--)
 8001212:	bf00      	nop
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	1e5a      	subs	r2, r3, #1
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1fa      	bne.n	8001214 <P_LCD_2x16_Delay+0xa>
  {
  }
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <P_LCD_2x16_InitSequenz>:

void P_LCD_2x16_InitSequenz(LCD_2X16_t* LCD_2X16)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  //Inicializacion de la secuencia:
  P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16);
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	2002      	movs	r0, #2
 8001236:	f7ff ffc9 	bl	80011cc <P_LCD_2x16_PinHi>
  P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16);
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	2003      	movs	r0, #3
 800123e:	f7ff ffc5 	bl	80011cc <P_LCD_2x16_PinHi>
  P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	2004      	movs	r0, #4
 8001246:	f7ff ffa2 	bl	800118e <P_LCD_2x16_PinLo>
  P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	2005      	movs	r0, #5
 800124e:	f7ff ff9e 	bl	800118e <P_LCD_2x16_PinLo>
  // Erster Init Impuls
  P_LCD_2x16_Clk(LCD_2X16);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 f82d 	bl	80012b2 <P_LCD_2x16_Clk>
  P_LCD_2x16_Delay(TLCD_PAUSE);
 8001258:	f24c 3050 	movw	r0, #50000	; 0xc350
 800125c:	f7ff ffd5 	bl	800120a <P_LCD_2x16_Delay>
  // Zweiter Init Impuls
  P_LCD_2x16_Clk(LCD_2X16);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 f826 	bl	80012b2 <P_LCD_2x16_Clk>
  P_LCD_2x16_Delay(TLCD_PAUSE);
 8001266:	f24c 3050 	movw	r0, #50000	; 0xc350
 800126a:	f7ff ffce 	bl	800120a <P_LCD_2x16_Delay>
  // Dritter Init Impuls
  P_LCD_2x16_Clk(LCD_2X16);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 f81f 	bl	80012b2 <P_LCD_2x16_Clk>
  P_LCD_2x16_Delay(TLCD_PAUSE);
 8001274:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001278:	f7ff ffc7 	bl	800120a <P_LCD_2x16_Delay>
  // LCD-Modus einstellen (4Bit-Mode)
  P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	2002      	movs	r0, #2
 8001280:	f7ff ff85 	bl	800118e <P_LCD_2x16_PinLo>
  P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16);
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	2003      	movs	r0, #3
 8001288:	f7ff ffa0 	bl	80011cc <P_LCD_2x16_PinHi>
  P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	2004      	movs	r0, #4
 8001290:	f7ff ff7d 	bl	800118e <P_LCD_2x16_PinLo>
  P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	2005      	movs	r0, #5
 8001298:	f7ff ff79 	bl	800118e <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f808 	bl	80012b2 <P_LCD_2x16_Clk>
  P_LCD_2x16_Delay(TLCD_PAUSE);
 80012a2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012a6:	f7ff ffb0 	bl	800120a <P_LCD_2x16_Delay>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <P_LCD_2x16_Clk>:

void P_LCD_2x16_Clk(LCD_2X16_t* LCD_2X16)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  // Pin-E auf Hi
  P_LCD_2x16_PinHi(TLCD_E, LCD_2X16);
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	2001      	movs	r0, #1
 80012be:	f7ff ff85 	bl	80011cc <P_LCD_2x16_PinHi>
  // kleine Pause
  P_LCD_2x16_Delay(TLCD_CLK_PAUSE);
 80012c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012c6:	f7ff ffa0 	bl	800120a <P_LCD_2x16_Delay>
  // Pin-E auf Lo
  P_LCD_2x16_PinLo(TLCD_E, LCD_2X16);
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	2001      	movs	r0, #1
 80012ce:	f7ff ff5e 	bl	800118e <P_LCD_2x16_PinLo>
  // kleine Pause
  P_LCD_2x16_Delay(TLCD_CLK_PAUSE);
 80012d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012d6:	f7ff ff98 	bl	800120a <P_LCD_2x16_Delay>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <P_LCD_2x16_Cmd>:

void P_LCD_2x16_Cmd(uint8_t wert, LCD_2X16_t* LCD_2X16)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	6039      	str	r1, [r7, #0]
 80012ec:	71fb      	strb	r3, [r7, #7]
  // RS=Lo (Command)
  P_LCD_2x16_PinLo(TLCD_RS, LCD_2X16);
 80012ee:	6839      	ldr	r1, [r7, #0]
 80012f0:	2000      	movs	r0, #0
 80012f2:	f7ff ff4c 	bl	800118e <P_LCD_2x16_PinLo>
  // Hi-Nibble ausgeben
  if((wert&0x80)!=0) P_LCD_2x16_PinHi(TLCD_D7, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	da04      	bge.n	8001308 <P_LCD_2x16_Cmd+0x26>
 80012fe:	6839      	ldr	r1, [r7, #0]
 8001300:	2005      	movs	r0, #5
 8001302:	f7ff ff63 	bl	80011cc <P_LCD_2x16_PinHi>
 8001306:	e003      	b.n	8001310 <P_LCD_2x16_Cmd+0x2e>
 8001308:	6839      	ldr	r1, [r7, #0]
 800130a:	2005      	movs	r0, #5
 800130c:	f7ff ff3f 	bl	800118e <P_LCD_2x16_PinLo>
  if((wert&0x40)!=0) P_LCD_2x16_PinHi(TLCD_D6, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001316:	2b00      	cmp	r3, #0
 8001318:	d004      	beq.n	8001324 <P_LCD_2x16_Cmd+0x42>
 800131a:	6839      	ldr	r1, [r7, #0]
 800131c:	2004      	movs	r0, #4
 800131e:	f7ff ff55 	bl	80011cc <P_LCD_2x16_PinHi>
 8001322:	e003      	b.n	800132c <P_LCD_2x16_Cmd+0x4a>
 8001324:	6839      	ldr	r1, [r7, #0]
 8001326:	2004      	movs	r0, #4
 8001328:	f7ff ff31 	bl	800118e <P_LCD_2x16_PinLo>
  if((wert&0x20)!=0) P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D5, LCD_2X16);
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	f003 0320 	and.w	r3, r3, #32
 8001332:	2b00      	cmp	r3, #0
 8001334:	d004      	beq.n	8001340 <P_LCD_2x16_Cmd+0x5e>
 8001336:	6839      	ldr	r1, [r7, #0]
 8001338:	2003      	movs	r0, #3
 800133a:	f7ff ff47 	bl	80011cc <P_LCD_2x16_PinHi>
 800133e:	e003      	b.n	8001348 <P_LCD_2x16_Cmd+0x66>
 8001340:	6839      	ldr	r1, [r7, #0]
 8001342:	2003      	movs	r0, #3
 8001344:	f7ff ff23 	bl	800118e <P_LCD_2x16_PinLo>
  if((wert&0x10)!=0) P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	f003 0310 	and.w	r3, r3, #16
 800134e:	2b00      	cmp	r3, #0
 8001350:	d004      	beq.n	800135c <P_LCD_2x16_Cmd+0x7a>
 8001352:	6839      	ldr	r1, [r7, #0]
 8001354:	2002      	movs	r0, #2
 8001356:	f7ff ff39 	bl	80011cc <P_LCD_2x16_PinHi>
 800135a:	e003      	b.n	8001364 <P_LCD_2x16_Cmd+0x82>
 800135c:	6839      	ldr	r1, [r7, #0]
 800135e:	2002      	movs	r0, #2
 8001360:	f7ff ff15 	bl	800118e <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 8001364:	6838      	ldr	r0, [r7, #0]
 8001366:	f7ff ffa4 	bl	80012b2 <P_LCD_2x16_Clk>
  // Lo-Nibble ausgeben
  if((wert&0x08)!=0) P_LCD_2x16_PinHi(TLCD_D7, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	f003 0308 	and.w	r3, r3, #8
 8001370:	2b00      	cmp	r3, #0
 8001372:	d004      	beq.n	800137e <P_LCD_2x16_Cmd+0x9c>
 8001374:	6839      	ldr	r1, [r7, #0]
 8001376:	2005      	movs	r0, #5
 8001378:	f7ff ff28 	bl	80011cc <P_LCD_2x16_PinHi>
 800137c:	e003      	b.n	8001386 <P_LCD_2x16_Cmd+0xa4>
 800137e:	6839      	ldr	r1, [r7, #0]
 8001380:	2005      	movs	r0, #5
 8001382:	f7ff ff04 	bl	800118e <P_LCD_2x16_PinLo>
  if((wert&0x04)!=0) P_LCD_2x16_PinHi(TLCD_D6, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	2b00      	cmp	r3, #0
 800138e:	d004      	beq.n	800139a <P_LCD_2x16_Cmd+0xb8>
 8001390:	6839      	ldr	r1, [r7, #0]
 8001392:	2004      	movs	r0, #4
 8001394:	f7ff ff1a 	bl	80011cc <P_LCD_2x16_PinHi>
 8001398:	e003      	b.n	80013a2 <P_LCD_2x16_Cmd+0xc0>
 800139a:	6839      	ldr	r1, [r7, #0]
 800139c:	2004      	movs	r0, #4
 800139e:	f7ff fef6 	bl	800118e <P_LCD_2x16_PinLo>
  if((wert&0x02)!=0) P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D5, LCD_2X16);
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d004      	beq.n	80013b6 <P_LCD_2x16_Cmd+0xd4>
 80013ac:	6839      	ldr	r1, [r7, #0]
 80013ae:	2003      	movs	r0, #3
 80013b0:	f7ff ff0c 	bl	80011cc <P_LCD_2x16_PinHi>
 80013b4:	e003      	b.n	80013be <P_LCD_2x16_Cmd+0xdc>
 80013b6:	6839      	ldr	r1, [r7, #0]
 80013b8:	2003      	movs	r0, #3
 80013ba:	f7ff fee8 	bl	800118e <P_LCD_2x16_PinLo>
  if((wert&0x01)!=0) P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d004      	beq.n	80013d2 <P_LCD_2x16_Cmd+0xf0>
 80013c8:	6839      	ldr	r1, [r7, #0]
 80013ca:	2002      	movs	r0, #2
 80013cc:	f7ff fefe 	bl	80011cc <P_LCD_2x16_PinHi>
 80013d0:	e003      	b.n	80013da <P_LCD_2x16_Cmd+0xf8>
 80013d2:	6839      	ldr	r1, [r7, #0]
 80013d4:	2002      	movs	r0, #2
 80013d6:	f7ff feda 	bl	800118e <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 80013da:	6838      	ldr	r0, [r7, #0]
 80013dc:	f7ff ff69 	bl	80012b2 <P_LCD_2x16_Clk>
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <P_LCD_2x16_Cursor>:

void P_LCD_2x16_Cursor(LCD_2X16_t* LCD_2X16, uint8_t x, uint8_t y)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	70fb      	strb	r3, [r7, #3]
 80013f4:	4613      	mov	r3, r2
 80013f6:	70bb      	strb	r3, [r7, #2]
  uint8_t wert;

  if(x>=TLCD_MAXX) x=0;
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	2b0f      	cmp	r3, #15
 80013fc:	d901      	bls.n	8001402 <P_LCD_2x16_Cursor+0x1a>
 80013fe:	2300      	movs	r3, #0
 8001400:	70fb      	strb	r3, [r7, #3]
  if(y>=TLCD_MAXY) y=0;
 8001402:	78bb      	ldrb	r3, [r7, #2]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d901      	bls.n	800140c <P_LCD_2x16_Cursor+0x24>
 8001408:	2300      	movs	r3, #0
 800140a:	70bb      	strb	r3, [r7, #2]

  wert=(y<<6);
 800140c:	78bb      	ldrb	r3, [r7, #2]
 800140e:	019b      	lsls	r3, r3, #6
 8001410:	73fb      	strb	r3, [r7, #15]
  wert|=x;
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	78fb      	ldrb	r3, [r7, #3]
 8001416:	4313      	orrs	r3, r2
 8001418:	73fb      	strb	r3, [r7, #15]
  wert|=0x80;
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001420:	73fb      	strb	r3, [r7, #15]
  P_LCD_2x16_Cmd(wert,LCD_2X16);
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff5b 	bl	80012e2 <P_LCD_2x16_Cmd>
}
 800142c:	bf00      	nop
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <P_LCD_2x16_Data>:

void P_LCD_2x16_Data(uint8_t wert, LCD_2X16_t* LCD_2X16)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
  // RS=Hi (Data)
  P_LCD_2x16_PinHi(TLCD_RS, LCD_2X16);
 8001440:	6839      	ldr	r1, [r7, #0]
 8001442:	2000      	movs	r0, #0
 8001444:	f7ff fec2 	bl	80011cc <P_LCD_2x16_PinHi>
  // Hi-Nibble ausgeben
  if((wert&0x80)!=0) P_LCD_2x16_PinHi(TLCD_D7, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	da04      	bge.n	800145a <P_LCD_2x16_Data+0x26>
 8001450:	6839      	ldr	r1, [r7, #0]
 8001452:	2005      	movs	r0, #5
 8001454:	f7ff feba 	bl	80011cc <P_LCD_2x16_PinHi>
 8001458:	e003      	b.n	8001462 <P_LCD_2x16_Data+0x2e>
 800145a:	6839      	ldr	r1, [r7, #0]
 800145c:	2005      	movs	r0, #5
 800145e:	f7ff fe96 	bl	800118e <P_LCD_2x16_PinLo>
  if((wert&0x40)!=0) P_LCD_2x16_PinHi(TLCD_D6, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001468:	2b00      	cmp	r3, #0
 800146a:	d004      	beq.n	8001476 <P_LCD_2x16_Data+0x42>
 800146c:	6839      	ldr	r1, [r7, #0]
 800146e:	2004      	movs	r0, #4
 8001470:	f7ff feac 	bl	80011cc <P_LCD_2x16_PinHi>
 8001474:	e003      	b.n	800147e <P_LCD_2x16_Data+0x4a>
 8001476:	6839      	ldr	r1, [r7, #0]
 8001478:	2004      	movs	r0, #4
 800147a:	f7ff fe88 	bl	800118e <P_LCD_2x16_PinLo>
  if((wert&0x20)!=0) P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D5, LCD_2X16);
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	f003 0320 	and.w	r3, r3, #32
 8001484:	2b00      	cmp	r3, #0
 8001486:	d004      	beq.n	8001492 <P_LCD_2x16_Data+0x5e>
 8001488:	6839      	ldr	r1, [r7, #0]
 800148a:	2003      	movs	r0, #3
 800148c:	f7ff fe9e 	bl	80011cc <P_LCD_2x16_PinHi>
 8001490:	e003      	b.n	800149a <P_LCD_2x16_Data+0x66>
 8001492:	6839      	ldr	r1, [r7, #0]
 8001494:	2003      	movs	r0, #3
 8001496:	f7ff fe7a 	bl	800118e <P_LCD_2x16_PinLo>
  if((wert&0x10)!=0) P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	f003 0310 	and.w	r3, r3, #16
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d004      	beq.n	80014ae <P_LCD_2x16_Data+0x7a>
 80014a4:	6839      	ldr	r1, [r7, #0]
 80014a6:	2002      	movs	r0, #2
 80014a8:	f7ff fe90 	bl	80011cc <P_LCD_2x16_PinHi>
 80014ac:	e003      	b.n	80014b6 <P_LCD_2x16_Data+0x82>
 80014ae:	6839      	ldr	r1, [r7, #0]
 80014b0:	2002      	movs	r0, #2
 80014b2:	f7ff fe6c 	bl	800118e <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 80014b6:	6838      	ldr	r0, [r7, #0]
 80014b8:	f7ff fefb 	bl	80012b2 <P_LCD_2x16_Clk>
  // Lo-Nibble ausgeben
  if((wert&0x08)!=0) P_LCD_2x16_PinHi(TLCD_D7, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d004      	beq.n	80014d0 <P_LCD_2x16_Data+0x9c>
 80014c6:	6839      	ldr	r1, [r7, #0]
 80014c8:	2005      	movs	r0, #5
 80014ca:	f7ff fe7f 	bl	80011cc <P_LCD_2x16_PinHi>
 80014ce:	e003      	b.n	80014d8 <P_LCD_2x16_Data+0xa4>
 80014d0:	6839      	ldr	r1, [r7, #0]
 80014d2:	2005      	movs	r0, #5
 80014d4:	f7ff fe5b 	bl	800118e <P_LCD_2x16_PinLo>
  if((wert&0x04)!=0) P_LCD_2x16_PinHi(TLCD_D6, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d004      	beq.n	80014ec <P_LCD_2x16_Data+0xb8>
 80014e2:	6839      	ldr	r1, [r7, #0]
 80014e4:	2004      	movs	r0, #4
 80014e6:	f7ff fe71 	bl	80011cc <P_LCD_2x16_PinHi>
 80014ea:	e003      	b.n	80014f4 <P_LCD_2x16_Data+0xc0>
 80014ec:	6839      	ldr	r1, [r7, #0]
 80014ee:	2004      	movs	r0, #4
 80014f0:	f7ff fe4d 	bl	800118e <P_LCD_2x16_PinLo>
  if((wert&0x02)!=0) P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D5, LCD_2X16);
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d004      	beq.n	8001508 <P_LCD_2x16_Data+0xd4>
 80014fe:	6839      	ldr	r1, [r7, #0]
 8001500:	2003      	movs	r0, #3
 8001502:	f7ff fe63 	bl	80011cc <P_LCD_2x16_PinHi>
 8001506:	e003      	b.n	8001510 <P_LCD_2x16_Data+0xdc>
 8001508:	6839      	ldr	r1, [r7, #0]
 800150a:	2003      	movs	r0, #3
 800150c:	f7ff fe3f 	bl	800118e <P_LCD_2x16_PinLo>
  if((wert&0x01)!=0) P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d004      	beq.n	8001524 <P_LCD_2x16_Data+0xf0>
 800151a:	6839      	ldr	r1, [r7, #0]
 800151c:	2002      	movs	r0, #2
 800151e:	f7ff fe55 	bl	80011cc <P_LCD_2x16_PinHi>
 8001522:	e003      	b.n	800152c <P_LCD_2x16_Data+0xf8>
 8001524:	6839      	ldr	r1, [r7, #0]
 8001526:	2002      	movs	r0, #2
 8001528:	f7ff fe31 	bl	800118e <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 800152c:	6838      	ldr	r0, [r7, #0]
 800152e:	f7ff fec0 	bl	80012b2 <P_LCD_2x16_Clk>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <FIND_DAC_CHANNEL>:
			return EXTI15_10_IRQn;
	else 	return 0;
}

uint32_t FIND_DAC_CHANNEL(GPIO_TypeDef* Port, uint32_t Pin)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
	if(Port == GPIOA && Pin == GPIO_Pin_5) return DAC_Channel_2;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <FIND_DAC_CHANNEL+0x2c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d104      	bne.n	8001558 <FIND_DAC_CHANNEL+0x1c>
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	2b20      	cmp	r3, #32
 8001552:	d101      	bne.n	8001558 <FIND_DAC_CHANNEL+0x1c>
 8001554:	2310      	movs	r3, #16
 8001556:	e000      	b.n	800155a <FIND_DAC_CHANNEL+0x1e>
	else return 0;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40020000 	.word	0x40020000

0800156c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800156c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a4 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001570:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001572:	e003      	b.n	800157c <LoopCopyDataInit>

08001574 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001576:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001578:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800157a:	3104      	adds	r1, #4

0800157c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800157c:	480b      	ldr	r0, [pc, #44]	; (80015ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001580:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001582:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001584:	d3f6      	bcc.n	8001574 <CopyDataInit>
  ldr  r2, =_sbss
 8001586:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001588:	e002      	b.n	8001590 <LoopFillZerobss>

0800158a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800158a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800158c:	f842 3b04 	str.w	r3, [r2], #4

08001590 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001592:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001594:	d3f9      	bcc.n	800158a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001596:	f000 f83b 	bl	8001610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800159a:	f000 f967 	bl	800186c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800159e:	f7ff fae9 	bl	8000b74 <main>
  bx  lr    
 80015a2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015a4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80015a8:	08001948 	.word	0x08001948
  ldr  r0, =_sdata
 80015ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015b0:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 80015b4:	2000009c 	.word	0x2000009c
  ldr  r3, = _ebss
 80015b8:	200000f8 	.word	0x200000f8

080015bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015bc:	e7fe      	b.n	80015bc <ADC_IRQHandler>

080015be <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <HardFault_Handler+0x4>

080015d2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <MemManage_Handler+0x4>

080015d8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <BusFault_Handler+0x4>

080015de <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <UsageFault_Handler+0x4>

080015e4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001614:	4a16      	ldr	r2, [pc, #88]	; (8001670 <SystemInit+0x60>)
 8001616:	4b16      	ldr	r3, [pc, #88]	; (8001670 <SystemInit+0x60>)
 8001618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800161c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001624:	4a13      	ldr	r2, [pc, #76]	; (8001674 <SystemInit+0x64>)
 8001626:	4b13      	ldr	r3, [pc, #76]	; (8001674 <SystemInit+0x64>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001630:	4b10      	ldr	r3, [pc, #64]	; (8001674 <SystemInit+0x64>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001636:	4a0f      	ldr	r2, [pc, #60]	; (8001674 <SystemInit+0x64>)
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <SystemInit+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001644:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <SystemInit+0x64>)
 8001648:	4a0b      	ldr	r2, [pc, #44]	; (8001678 <SystemInit+0x68>)
 800164a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800164c:	4a09      	ldr	r2, [pc, #36]	; (8001674 <SystemInit+0x64>)
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <SystemInit+0x64>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001656:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <SystemInit+0x64>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800165e:	f000 f889 	bl	8001774 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001662:	4b03      	ldr	r3, [pc, #12]	; (8001670 <SystemInit+0x60>)
 8001664:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001668:	609a      	str	r2, [r3, #8]
#endif
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	e000ed00 	.word	0xe000ed00
 8001674:	40023800 	.word	0x40023800
 8001678:	24003010 	.word	0x24003010

0800167c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800167c:	b480      	push	{r7}
 800167e:	b087      	sub	sp, #28
 8001680:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	2302      	movs	r3, #2
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	2302      	movs	r3, #2
 8001694:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001696:	4b32      	ldr	r3, [pc, #200]	; (8001760 <SystemCoreClockUpdate+0xe4>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	d007      	beq.n	80016b6 <SystemCoreClockUpdate+0x3a>
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d009      	beq.n	80016be <SystemCoreClockUpdate+0x42>
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d13d      	bne.n	800172a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80016ae:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <SystemCoreClockUpdate+0xe8>)
 80016b0:	4a2d      	ldr	r2, [pc, #180]	; (8001768 <SystemCoreClockUpdate+0xec>)
 80016b2:	601a      	str	r2, [r3, #0]
      break;
 80016b4:	e03d      	b.n	8001732 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80016b6:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <SystemCoreClockUpdate+0xe8>)
 80016b8:	4a2c      	ldr	r2, [pc, #176]	; (800176c <SystemCoreClockUpdate+0xf0>)
 80016ba:	601a      	str	r2, [r3, #0]
      break;
 80016bc:	e039      	b.n	8001732 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80016be:	4b28      	ldr	r3, [pc, #160]	; (8001760 <SystemCoreClockUpdate+0xe4>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	0d9b      	lsrs	r3, r3, #22
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016ca:	4b25      	ldr	r3, [pc, #148]	; (8001760 <SystemCoreClockUpdate+0xe4>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016d2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00c      	beq.n	80016f4 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80016da:	4a24      	ldr	r2, [pc, #144]	; (800176c <SystemCoreClockUpdate+0xf0>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e2:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <SystemCoreClockUpdate+0xe4>)
 80016e4:	6852      	ldr	r2, [r2, #4]
 80016e6:	0992      	lsrs	r2, r2, #6
 80016e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80016ec:	fb02 f303 	mul.w	r3, r2, r3
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	e00b      	b.n	800170c <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80016f4:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <SystemCoreClockUpdate+0xec>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fc:	4a18      	ldr	r2, [pc, #96]	; (8001760 <SystemCoreClockUpdate+0xe4>)
 80016fe:	6852      	ldr	r2, [r2, #4]
 8001700:	0992      	lsrs	r2, r2, #6
 8001702:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001706:	fb02 f303 	mul.w	r3, r2, r3
 800170a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800170c:	4b14      	ldr	r3, [pc, #80]	; (8001760 <SystemCoreClockUpdate+0xe4>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	0c1b      	lsrs	r3, r3, #16
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	3301      	adds	r3, #1
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	fbb2 f3f3 	udiv	r3, r2, r3
 8001724:	4a0f      	ldr	r2, [pc, #60]	; (8001764 <SystemCoreClockUpdate+0xe8>)
 8001726:	6013      	str	r3, [r2, #0]
      break;
 8001728:	e003      	b.n	8001732 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <SystemCoreClockUpdate+0xe8>)
 800172c:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <SystemCoreClockUpdate+0xec>)
 800172e:	601a      	str	r2, [r3, #0]
      break;
 8001730:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <SystemCoreClockUpdate+0xe4>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	091b      	lsrs	r3, r3, #4
 8001738:	f003 030f 	and.w	r3, r3, #15
 800173c:	4a0c      	ldr	r2, [pc, #48]	; (8001770 <SystemCoreClockUpdate+0xf4>)
 800173e:	5cd3      	ldrb	r3, [r2, r3]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001744:	4b07      	ldr	r3, [pc, #28]	; (8001764 <SystemCoreClockUpdate+0xe8>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	fa22 f303 	lsr.w	r3, r2, r3
 800174e:	4a05      	ldr	r2, [pc, #20]	; (8001764 <SystemCoreClockUpdate+0xe8>)
 8001750:	6013      	str	r3, [r2, #0]
}
 8001752:	bf00      	nop
 8001754:	371c      	adds	r7, #28
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800
 8001764:	20000088 	.word	0x20000088
 8001768:	00f42400 	.word	0x00f42400
 800176c:	007a1200 	.word	0x007a1200
 8001770:	2000008c 	.word	0x2000008c

08001774 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	2300      	movs	r3, #0
 8001780:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001782:	4a36      	ldr	r2, [pc, #216]	; (800185c <SetSysClock+0xe8>)
 8001784:	4b35      	ldr	r3, [pc, #212]	; (800185c <SetSysClock+0xe8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800178e:	4b33      	ldr	r3, [pc, #204]	; (800185c <SetSysClock+0xe8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3301      	adds	r3, #1
 800179c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d103      	bne.n	80017ac <SetSysClock+0x38>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80017aa:	d1f0      	bne.n	800178e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80017ac:	4b2b      	ldr	r3, [pc, #172]	; (800185c <SetSysClock+0xe8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d002      	beq.n	80017be <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80017b8:	2301      	movs	r3, #1
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	e001      	b.n	80017c2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80017be:	2300      	movs	r3, #0
 80017c0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d142      	bne.n	800184e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80017c8:	4a24      	ldr	r2, [pc, #144]	; (800185c <SetSysClock+0xe8>)
 80017ca:	4b24      	ldr	r3, [pc, #144]	; (800185c <SetSysClock+0xe8>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80017d4:	4a22      	ldr	r2, [pc, #136]	; (8001860 <SetSysClock+0xec>)
 80017d6:	4b22      	ldr	r3, [pc, #136]	; (8001860 <SetSysClock+0xec>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017de:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80017e0:	4a1e      	ldr	r2, [pc, #120]	; (800185c <SetSysClock+0xe8>)
 80017e2:	4b1e      	ldr	r3, [pc, #120]	; (800185c <SetSysClock+0xe8>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80017e8:	4a1c      	ldr	r2, [pc, #112]	; (800185c <SetSysClock+0xe8>)
 80017ea:	4b1c      	ldr	r3, [pc, #112]	; (800185c <SetSysClock+0xe8>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017f2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80017f4:	4a19      	ldr	r2, [pc, #100]	; (800185c <SetSysClock+0xe8>)
 80017f6:	4b19      	ldr	r3, [pc, #100]	; (800185c <SetSysClock+0xe8>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80017fe:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <SetSysClock+0xe8>)
 8001802:	4a18      	ldr	r2, [pc, #96]	; (8001864 <SetSysClock+0xf0>)
 8001804:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001806:	4a15      	ldr	r2, [pc, #84]	; (800185c <SetSysClock+0xe8>)
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <SetSysClock+0xe8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001810:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001812:	bf00      	nop
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <SetSysClock+0xe8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f9      	beq.n	8001814 <SetSysClock+0xa0>
    {
    }
   
#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <SetSysClock+0xf4>)
 8001822:	f240 7205 	movw	r2, #1797	; 0x705
 8001826:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001828:	4a0c      	ldr	r2, [pc, #48]	; (800185c <SetSysClock+0xe8>)
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <SetSysClock+0xe8>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f023 0303 	bic.w	r3, r3, #3
 8001832:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001834:	4a09      	ldr	r2, [pc, #36]	; (800185c <SetSysClock+0xe8>)
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <SetSysClock+0xe8>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f043 0302 	orr.w	r3, r3, #2
 800183e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001840:	bf00      	nop
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <SetSysClock+0xe8>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b08      	cmp	r3, #8
 800184c:	d1f9      	bne.n	8001842 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	40007000 	.word	0x40007000
 8001864:	07402d04 	.word	0x07402d04
 8001868:	40023c00 	.word	0x40023c00

0800186c <__libc_init_array>:
 800186c:	b570      	push	{r4, r5, r6, lr}
 800186e:	4e0d      	ldr	r6, [pc, #52]	; (80018a4 <__libc_init_array+0x38>)
 8001870:	4c0d      	ldr	r4, [pc, #52]	; (80018a8 <__libc_init_array+0x3c>)
 8001872:	1ba4      	subs	r4, r4, r6
 8001874:	10a4      	asrs	r4, r4, #2
 8001876:	2500      	movs	r5, #0
 8001878:	42a5      	cmp	r5, r4
 800187a:	d109      	bne.n	8001890 <__libc_init_array+0x24>
 800187c:	4e0b      	ldr	r6, [pc, #44]	; (80018ac <__libc_init_array+0x40>)
 800187e:	4c0c      	ldr	r4, [pc, #48]	; (80018b0 <__libc_init_array+0x44>)
 8001880:	f000 f818 	bl	80018b4 <_init>
 8001884:	1ba4      	subs	r4, r4, r6
 8001886:	10a4      	asrs	r4, r4, #2
 8001888:	2500      	movs	r5, #0
 800188a:	42a5      	cmp	r5, r4
 800188c:	d105      	bne.n	800189a <__libc_init_array+0x2e>
 800188e:	bd70      	pop	{r4, r5, r6, pc}
 8001890:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001894:	4798      	blx	r3
 8001896:	3501      	adds	r5, #1
 8001898:	e7ee      	b.n	8001878 <__libc_init_array+0xc>
 800189a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800189e:	4798      	blx	r3
 80018a0:	3501      	adds	r5, #1
 80018a2:	e7f2      	b.n	800188a <__libc_init_array+0x1e>
 80018a4:	08001940 	.word	0x08001940
 80018a8:	08001940 	.word	0x08001940
 80018ac:	08001940 	.word	0x08001940
 80018b0:	08001944 	.word	0x08001944

080018b4 <_init>:
 80018b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018b6:	bf00      	nop
 80018b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ba:	bc08      	pop	{r3}
 80018bc:	469e      	mov	lr, r3
 80018be:	4770      	bx	lr

080018c0 <_fini>:
 80018c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018c2:	bf00      	nop
 80018c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018c6:	bc08      	pop	{r3}
 80018c8:	469e      	mov	lr, r3
 80018ca:	4770      	bx	lr
